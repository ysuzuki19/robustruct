// Code generated by senum; DO NOT EDIT.
package {{ .Package }}

type tag int
const (
{{- range $variant := .Variants }}
    tag{{ $variant.Name | capitalize }} tag = iota
{{- end }}
)

type {{ .EnumDefName }} struct {
    {{ .Package }}{{.UseTypeParams | bracket}}
    tag tag
}

{{- range $variant := .Variants }}
func New{{ $variant.Name | capitalize }}{{$.DefTypeParams | bracket}}({{ if $variant.HasData }}v {{ $variant.TypeName }}{{ end }}) {{ $.EnumUseName }} {
    return {{ $.EnumUseName }}{
        {{ $.Package }}: {{ $.Package }}{{ $.UseTypeParams | bracket }}{
            {{ $variant.FieldName }}: {{ if $variant.HasData }}v{{ else }}nil{{ end }},
        },
        tag: tag{{ $variant.Name | capitalize }},
    }
}
{{- end }}

{{- range $variant := .Variants }}
func (e *{{ $.EnumUseName }}) Is{{ $variant.Name | capitalize }}() bool {
    return e.tag == tag{{ $variant.Name | capitalize }}
}

{{- if $variant.HasData }}
func (e *{{ $.EnumUseName }}) As{{ $variant.Name | capitalize }}() ({{ $variant.TypeName }}, bool) {
    if e.Is{{ $variant.Name | capitalize }}() {
        return e.{{ $.Package }}.{{ $variant.FieldName }}, true
    }
    return nil, false
}
{{- end }}
{{- end }}

type Switcher{{.DefTypeParams | bracket}} struct {
{{- range $variant := .Variants }}
    {{ $variant.Name | capitalize }} func({{ if $variant.HasData }}v {{ $variant.TypeName }}{{ end }})
{{- end }}
}

func (e *{{ $.EnumUseName }}) Switch(s Switcher{{.UseTypeParams | bracket}}) {
    switch e.tag {
    {{- range $variant := .Variants }}
    case tag{{ $variant.Name | capitalize }}:
        {{- if $variant.HasData }}
        s.{{ $variant.Name | capitalize }}(e.{{ $.Package }}.{{ $variant.FieldName }})
        {{- else }}
        s.{{ $variant.Name | capitalize }}()
        {{- end }}
    {{- end }}
    }
}

type Matcher[MatchResult any {{.DefTypeParams | csvConnect}}] struct {
{{- range $variant := .Variants }}
    {{ $variant.Name | capitalize }} func({{ if $variant.HasData }}v {{ $variant.TypeName }}{{ end }}) MatchResult
{{- end }}
}

func Match[MatchResult any {{.DefTypeParams | csvConnect}}](e *{{ .EnumUseName }}, m Matcher[MatchResult {{.UseTypeParams | csvConnect}}]) MatchResult {
    switch e.tag {
    {{- range $variant := .Variants }}
    case tag{{ $variant.Name | capitalize }}:
        {{- if $variant.HasData }}
        return m.{{ $variant.Name | capitalize }}(e.{{ $.Package }}.{{ $variant.FieldName }})
        {{- else }}
        return m.{{ $variant.Name | capitalize }}()
        {{- end }}
    {{- end }}
    }
    panic("unreachable: invalid tag")
}