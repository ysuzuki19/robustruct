package process

import (
	"github.com/ysuzuki19/robustruct/cmd/exp/internal/coder"
)

type GenerateArgs struct {
	DirPath       string
	PackageName   string
	AnalyzeResult AnalyzeResult
}

func Generate(args GenerateArgs) ([]byte, error) {
	name := args.AnalyzeResult.Name
	fields := args.AnalyzeResult.Fields

	c := coder.New().Globals(coder.Vars{
		// "name":           args.AnalyzeResult.Name,
		"EnumName":       coder.Capitalize(args.AnalyzeResult.Name),
		"ValueType":      args.AnalyzeResult.ValueType,
		"ZeroFieldName":  args.AnalyzeResult.ZeroField.Name,
		"ZeroFieldValue": args.AnalyzeResult.ZeroField.Value,
	})

	c.
		// package declaration
		Str(`// Code generated by variant; DO NOT EDIT.`).LF().
		Format(`package %s`, args.PackageName).LF().

		// enum tag
		Tmpl(`type {{.EnumName}} int`).LF().
		Wrap("const (", ")", func() {
			c.Tmpl(`zero {{.EnumName}} = 0 // zero value catcher`).LF()
			for _, field := range fields {
				if args.AnalyzeResult.ValueType.IsString() {
					c.Format("%s %s = iota", coder.Capitalize(field.Name), name).LF()
				}
				if args.AnalyzeResult.ValueType.IsInt() {
					c.Format("%s %s = %s", coder.Capitalize(field.Name), name, field.Value).LF()
				}
			}
		}).LF().

		// list values
		Fn(func() {
			// (PACKAGE).Values()
			c.Tmpl(`func Values() []{{.ValueType}}`).Block(func() {
				c.Str(`return []`).Str(args.AnalyzeResult.ValueType.String()).Braces(func() {
					for _, field := range fields {
						c.Format("%s,", field.Value)
					}
				})
			}).LF()
			// (ENUM).Values()
			c.Tmpl(`func ({{.EnumName}})Values() []{{.ValueType}}`).Block(func() {
				c.Str(`return []`).Str(args.AnalyzeResult.ValueType.String()).Braces(func() {
					for _, field := range fields {
						c.Format("%s,", field.Value)
					}
				})
			}).LF()
		}).LF(2).

		// constructors
		Fn(func() {
			// (PACKAGE).Default()
			c.Tmpl(`func Default() {{.EnumName}}`).Braces(func() {
				c.Tmpl(`return {{.ZeroFieldName|capitalize}}`)
			}).LF()
			// (PACKAGE).NewDefault()
			c.Tmpl(`func NewDefault() {{.EnumName}}`).Braces(func() {
				c.Tmpl(`return {{.ZeroFieldName|capitalize}}`)
			}).LF()
			// (PACKAGE).New{Field}()
			for _, field := range fields {
				c.Tmpl(`func New{{.field|capitalize}}() {{.EnumName}}`, coder.Vars{
					"field": field.Name,
				})
				c.Braces(func() {
					c.Format(`return %s`, coder.Capitalize(field.Name))
				}).LF()
			}
		}).LF().

		// (ENUM).Is{Field}()
		Fn(func() {
			for _, field := range fields {
				c.Tmpl(`func (e {{.EnumName}}) Is{{.field|capitalize}}() bool`, coder.Vars{
					"field": field.Name,
				})
				c.Braces(func() {
					c.Format(`return e == %s`, coder.Capitalize(field.Name))
					if field.Name == args.AnalyzeResult.ZeroField.Name {
						c.Str("|| e == zero")
					}
				}).LF()
			}
		}).LF().

		// if type==string
		FnIf(args.AnalyzeResult.ValueType.IsString(), func() {
			// (ENUM).String()
			c.Tmpl(`func (e {{.EnumName}}) String() string`).Block(func() {
				c.Str(`switch e`).Braces(func() {
					for _, field := range fields {
						c.Tmpl(`case {{.field|capitalize}}: return {{.value}}`, coder.Vars{
							"field": field.Name,
							"value": field.Value,
						}).LF()
					}
					c.Tmpl(`default: return {{.ZeroFieldValue}}`).LF()
				})
			}).LF(2)
			// (PACKAGE).FromString()
			c.Tmpl(`func FromString(s string) ({{.EnumName}}, error)`).Block(func() {
				c.Str(`switch s`).Braces(func() {
					for _, field := range fields {
						c.Tmpl(`case "{{.field}}": return {{.field|capitalize}}, nil`, coder.Vars{
							"field": field.Name,
							"value": field.Value,
						}).LF()
					}
					c.Format(`default: return zero, fmt.Errorf("invalid %s: %%s", s)`, name).LF()
				})
			}).LF()
		}).LF().

		// if type==int
		FnIf(args.AnalyzeResult.ValueType.IsInt(), func() {
			// (ENUM).Int()
			c.Tmpl(`func (e {{.EnumName}}) Int() int`).Block(func() {
				c.Str(`return int(e)`)
			}).LF()
			// (ENUM).FromInt()
			c.Tmpl(`func FromInt(i int) ({{.EnumName}}, error)`).Block(func() {
				c.Str(`switch i`).Braces(func() {
					for _, field := range fields {
						c.Tmpl(`case {{.value}}: return {{.field|capitalize}}, nil`, coder.Vars{
							"field": field.Name,
							"value": field.Value,
						}).LF()
					}
					c.Format(`default: return zero, fmt.Errorf("invalid %s: %%d", i)`, name).LF()
				})
			})
		}).LF().

		//Switcher
		Fn(func() {}).LF().
		//Switch
		Fn(func() {}).LF()

	generated, err := c.Export()
	if err != nil {
		return nil, err
	}

	return generated, nil
}
