// Code generated by senum; DO NOT EDIT.
package command

import "github.com/ysuzuki19/robustruct/cmd/exp/senumgen/internal/sample/command/sub"

type tag int

const (
	tagHelp  tag = iota
	tagRun   tag = iota
	tagSub   tag = iota
	tagLocal tag = iota
)

type commandEnum struct {
	command
	tag tag
}

func NewHelp() commandEnum {
	return commandEnum{
		command: command{
			help: nil,
		},
		tag: tagHelp,
	}
}
func NewRun(v *string) commandEnum {
	return commandEnum{
		command: command{
			run: v,
		},
		tag: tagRun,
	}
}
func NewSub(v *sub.SubCommand) commandEnum {
	return commandEnum{
		command: command{
			sub: v,
		},
		tag: tagSub,
	}
}
func NewLocal(v *Local) commandEnum {
	return commandEnum{
		command: command{
			local: v,
		},
		tag: tagLocal,
	}
}

func (e *commandEnum) IsHelp() bool {
	return e.tag == tagHelp
}
func (e *commandEnum) IsRun() bool {
	return e.tag == tagRun
}
func (e *commandEnum) IsSub() bool {
	return e.tag == tagSub
}
func (e *commandEnum) IsLocal() bool {
	return e.tag == tagLocal
}

func (e *commandEnum) AsRun() (*string, bool) {
	if e.IsRun() {
		return e.command.run, true
	}
	return nil, false
}
func (e *commandEnum) AsSub() (*sub.SubCommand, bool) {
	if e.IsSub() {
		return e.command.sub, true
	}
	return nil, false
}
func (e *commandEnum) AsLocal() (*Local, bool) {
	if e.IsLocal() {
		return e.command.local, true
	}
	return nil, false
}

type Switcher struct {
	Help  func()
	Run   func(v *string)
	Sub   func(v *sub.SubCommand)
	Local func(v *Local)
}

func (e *commandEnum) Switch(s Switcher) {
	switch e.tag {
	case tagHelp:
		s.Help()
	case tagRun:
		s.Run(e.command.run)
	case tagSub:
		s.Sub(e.command.sub)
	case tagLocal:
		s.Local(e.command.local)
	}
}

type Matcher[MatchResult any] struct {
	Help  func() MatchResult
	Run   func(v *string) MatchResult
	Sub   func(v *sub.SubCommand) MatchResult
	Local func(v *Local) MatchResult
}

func Match[MatchResult any](e *commandEnum, m Matcher[MatchResult]) MatchResult {
	switch e.tag {
	case tagHelp:
		return m.Help()
	case tagRun:
		return m.Run(e.command.run)
	case tagSub:
		return m.Sub(e.command.sub)
	case tagLocal:
		return m.Local(e.command.local)
	}
	panic("unreachable: invalid tag")
}
