// Code generated by variant; DO NOT EDIT.
package log_level

import "fmt"

type LogLevel int

const (
	zero  LogLevel = 0 // zero value catcher
	Debug LogLevel = 1
	Info  LogLevel = 2
	Warn  LogLevel = 3
	Error LogLevel = 4
	None  LogLevel = 5
)

func Values() []int {
	return []int{1, 2, 3, 4, 5}
}
func (LogLevel) Values() []int {
	return []int{1, 2, 3, 4, 5}
}

func Default() LogLevel    { return Debug }
func NewDefault() LogLevel { return Debug }
func NewDebug() LogLevel   { return Debug }
func NewInfo() LogLevel    { return Info }
func NewWarn() LogLevel    { return Warn }
func NewError() LogLevel   { return Error }
func NewNone() LogLevel    { return None }

func (e LogLevel) IsDebug() bool { return e == Debug || e == zero }
func (e LogLevel) IsInfo() bool  { return e == Info }
func (e LogLevel) IsWarn() bool  { return e == Warn }
func (e LogLevel) IsError() bool { return e == Error }
func (e LogLevel) IsNone() bool  { return e == None }

func (e LogLevel) Int() int {
	return int(e)
}
func FromInt(i int) (LogLevel, error) {
	switch i {
	case 1:
		return Debug, nil
	case 2:
		return Info, nil
	case 3:
		return Warn, nil
	case 4:
		return Error, nil
	case 5:
		return None, nil
	default:
		return zero, fmt.Errorf("invalid LogLevel: %d", i)
	}
}
